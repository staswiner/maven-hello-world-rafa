# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "zulu"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      #     - name: Build with Maven
      #       run: mvn -B package --file pom.xml

      - name: Install Package
        uses: ConorMacBride/install-package@v1.1.0
        with:
          apt: libxml-xpath-perl
      - shell: bash
        working-directory: ${{ github.workspace }}/myapp
        run: |
          # pom_dir="${{ github.workspace }}/myapp"
          version=$(xpath -q -e "/project/version/text()" pom.xml)
          echo $version
          # version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if ! [[ $version =~ ^[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
            echo version is of unexpected semver format of x.y.z. Exiting..
            exit 1
          fi
          z_value=$(echo $version | cut -d\. -f3)
          new_z_value=$((z_value+1))
          new_version="$(echo $version | rev | cut -d. -f2- | rev).$new_z_value)"
          mvn versions:set -DnewVersion=$new_version

#     - name: Publish to GitHub Packages Apache Maven
#       run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
#       env:
#         GITHUB_TOKEN: ${{ github.token }}
