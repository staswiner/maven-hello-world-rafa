name: Maven Package

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  # repository-projects: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "zulu"
          server-id: github
          settings-path: ${{ github.workspace }}

      # There dilema present is whether to use xpath for querying the version and xmlstarlet for updating the value
      # Or to use `mvn evaluate` for querying and `mvn version:set` for updating the value.
      # For the first one, i would only need to build a single layer with these apt packages present, and use github actions in a container.
      # For the mvn one, i would need to cache the .m2 packages requied for the seamless use of its methods.
      # At present time, both are present, and both are unoptimized.
      - name: Install Package
        uses: ConorMacBride/install-package@v1.1.0
        with:
          apt: libxml-xpath-perl

      - shell: bash
        name: increment pom version
        working-directory: ${{ github.workspace }}/myapp
        run: |
          version=$(xpath -q -e "/project/version/text()" pom.xml)
          # ====== 
          # alternative mvn version of retrieving the pom version
          # version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # ======

          if ! [[ $version =~ ^[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
            echo version is of unexpected semver format of x.y.z. Exiting..
            exit 1
          fi
          z_value=$(echo $version | cut -d\. -f3)
          new_z_value=$((z_value+1))
          new_version="$(echo $version | rev | cut -d. -f2- | rev).$new_z_value"
          echo $new_version
          mvn versions:set -DnewVersion=$new_version
          echo "new_version=$new_version" >> "${GITHUB_ENV}"

      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          username: staswiner
          password: ${{ secrets.STAS_DOCKERHUB }}

      - name: Build and push Docker images
        uses: cloudposse/github-action-docker-build-push@1.11.0
        with:
          platforms: linux/amd64
          registry: docker.io
          organization: staswiner
          repository: maven
          # List of tags
          tags: type=pep440,pattern={{version}},value=${{ env.new_version }}
          build-args: JAR_VERSION=${{ env.new_version }}

      - name: git commit and push
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email ${{ github.actor }}@users.noreply.github.com
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "test"
          git push
      # - name: Git Commit Push Action
      #   uses: GuillaumeFalourd/git-commit-push@v1.3
      #   with:
      #     email: ${{ github.actor }}@users.noreply.github.com
      #     name: ${{ github.actor }}
      #     commit_message: maven version ${{ env.new_version }}
      #     target_branch: ${{ github.ref }}
      #     files: .
      #     remote_repository: origin
      #     access_token: ${{ secrets.GITHUB_TOKEN }}
      #     # ${{ secrets.GITHUB_TOKEN }}
      #     force: 0
      #     tags: myapp-${{ env.new_version }}
